/*Copyright 2015 Michael Gouwens and The Yellow Thorn. All Rights Reserved.This program is free software. You can redistribute and/or modify it inaccordance with the terms of the accompanying license agreement.*/package com.terrainbuilder.tools{	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageQuality;	import flash.geom.Matrix;	import flash.geom.Rectangle;
	/**	 * ...	 * @author Michael Gouwens	 */	public class BitmapUtils	{				public function BitmapUtils():void {					}				public static function rotateBitmap(bmd:BitmapData, degrees:Number, stage:Stage, smooth:Boolean = false, stageQuality:String = StageQuality.LOW):BitmapData {						var box:Sprite = new Sprite();			box.graphics.lineStyle(0.1);			box.graphics.drawRect(0,0,bmd.width, bmd.height);			box.rotation = degrees;				var bounds:Rectangle = box.getBounds(stage);			var newWidth:uint = bounds.width;			var newHeight:uint = bounds.height;			var _bmd:BitmapData = new BitmapData(newWidth, newHeight, bmd.transparent, 0x00000000);			var angle_in_radians:Number = Math.PI * (degrees / 180);						var rotationMatrix:Matrix = new Matrix();			rotationMatrix.translate(-bmd.width / 2,-bmd.height/ 2);			rotationMatrix.rotate(angle_in_radians);			rotationMatrix.translate(newWidth/ 2,newHeight/2);						_bmd.drawWithQuality(bmd, rotationMatrix, null, null, null, smooth, stageQuality);						return _bmd;		}				public static function flipBitmap(bmd:BitmapData, horizontally:Boolean, vertically:Boolean, smooth:Boolean = false, stageQuality:String = StageQuality.LOW):BitmapData {						var _bmd:BitmapData = new BitmapData(bmd.width, bmd.height, bmd.transparent, 0x00000000);			var _height:uint = 0;			var _width:uint = 0;						var flipMatrix:Matrix = new Matrix();			flipMatrix.scale(1-2*Number(horizontally), 1-2*Number(vertically));						if (horizontally) _width = bmd.width;			if (vertically) _height = bmd.height;			flipMatrix.translate(_width, _height);			_bmd.drawWithQuality(bmd, flipMatrix, null, null, null, smooth, stageQuality);			bmd.dispose();						return _bmd;		}				public static function shiftBitmap(bmd:BitmapData, xPixels:int, yPixels:int, smooth:Boolean = false, stageQuality:String = StageQuality.LOW):BitmapData {						var _bmd:BitmapData = new BitmapData(bmd.width + xPixels, bmd.height + yPixels, bmd.transparent, 0x00000000);						var shiftMatrix:Matrix = new Matrix();			shiftMatrix.translate(xPixels, yPixels);			_bmd.drawWithQuality(bmd, shiftMatrix, null, null, null, smooth, stageQuality);			bmd.dispose();						return _bmd;		}				public static function scaleBitmap(bmd:BitmapData, _scale:Number, smooth:Boolean = false, stageQuality:String = StageQuality.LOW):BitmapData {			var scale:Number = _scale;			var matrix:Matrix = new Matrix();			matrix.scale(scale, scale);						var _bmd:BitmapData = new BitmapData(bmd.width * scale, bmd.height * scale, bmd.transparent, 0x00000000);						_bmd.drawWithQuality(bmd, matrix, null, null, null, smooth, stageQuality);			bmd.dispose();						return _bmd;		}				public static function scaleBitmap2(bmd:BitmapData, _scaleX:Number, _scaleY:Number, smooth:Boolean = false, stageQuality:String = StageQuality.LOW):BitmapData {						var matrix:Matrix = new Matrix();			matrix.scale(_scaleX, _scaleY);						var _bmd:BitmapData = new BitmapData(bmd.width * _scaleX, bmd.height * _scaleY, bmd.transparent, 0x00000000);						_bmd.drawWithQuality(bmd, matrix, null, null, null, smooth, stageQuality);			bmd.dispose();						return _bmd;		}	}	}